<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Database\Expression\QueryExpression;

/**
 * Shifts Controller
 *
 * @property \App\Model\Table\ShiftsTable $Shifts
 */
class ShiftsController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
                // Option B (preferred)
                $this->loadComponent('Ajax.Ajax', [
                    'actions' => ['edit'],
                ]);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $query = $this->Shifts->find()
            ->contain(['Rosters', 'Roles', 'Users']);
        $shifts = $this->paginate($query, ['limit' => 5000]); // Limit set to 5000


        $this->set(compact('shifts'));
    }

    /**
     * View method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null)
    {
        $shift = $this->Shifts->get($id, contain: ['Rosters', 'Roles', 'Users']);
        $this->set(compact('shift'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add($id = null)
    {
        // Assuming $id holds the ID of the roster you want to retrieve
        $roster = $this->fetchTable('Rosters')->find('all')->where(['id' => $id])->first();

        if ($this->request->is('ajax')) {
            $shift = $this->Shifts->newEmptyEntity();
            $data = $this->request->getQuery('data');
            $shift = $this->Shifts->patchEntity($shift, $data);

            // Assigned value for shift time
            $date = $data['shiftDate'];
            $s_time = $data['start_time'];
            $e_time = $data['end_time'];
            $dateTimeStart = $date . ' ' . $s_time . ':00';
            $dateTimeEnd = $date . ' ' . $e_time . ':00';
            $shift->start_time = $dateTimeStart;
            $shift->end_time = $dateTimeEnd;
            $shift->user_id = $data['user_id'];

            // Check if the user already has a shift during the same time
            $query = $this->Shifts->find()
                ->where(['user_id' => $shift->user_id])
                ->andWhere([
                    'OR' => [
                        [
                            'start_time <=' => $shift->start_time,
                            'end_time >=' => $shift->start_time
                        ],
                        [
                            'start_time <=' => $shift->end_time,
                            'end_time >=' => $shift->end_time
                        ],
                        [
                            'start_time >=' => $shift->start_time,
                            'end_time <=' => $shift->end_time
                        ]
                    ]
                ]);

            $exist = $query->all();
            if (!$exist->isEmpty()) {
                $message = 'This person has already been scheduled for another shift at this time.';
                if ($this->request->is('ajax')) {
                    return $this->response->withType('application/json')
                                          ->withStringBody(json_encode(['status' => 'error', 'message' => $message]));
                } else {
                    $this->Flash->error($message);
                    return $this->redirect($this->referer());
                }
            } else {
                if ($this->Shifts->save($shift)) {
                    $message = 'The shift has been saved.';
                    if ($this->request->is('ajax')) {
                        return $this->response->withType('application/json')
                                              ->withStringBody(json_encode(['status' => 'success', 'message' => $message, 'shiftId' => $shift->id]));
                    } else {
                        $this->Flash->success($message);
                        return $this->redirect($this->referer());
                    }
                } else {
                    $message = 'The shift could not be saved. Please, try again.';
                    if ($this->request->is('ajax')) {
                        return $this->response->withType('application/json')
                                              ->withStringBody(json_encode(['status' => 'error', 'message' => $message]));
                    } else {
                        $this->Flash->error($message);
                        return $this->redirect($this->referer());
                    }
                }
            }

        }
        $shift = $this->Shifts->newEmptyEntity();

        $shift_list = $this->getShiftsForRoster($roster->id);
        $roles = $this->Shifts->Roles->find()->all();

        $userAvailabilitiesRes = $this->fetchTable('Availabilities')->find()->all();
        $userAvailabilities = [];
        foreach ($userAvailabilitiesRes as $item) {
            $t = [];
            $t['id'] = $item->id;
            $t['user_id'] = $item->user_id;
            $t['monday'] = $item->monday;
            $t['tuesday'] = $item->tuesday;
            $t['wednesday'] = $item->wednesday;
            $t['thursday'] = $item->thursday;
            $t['friday'] = $item->friday;
            $t['saturday'] = $item->saturday;
            $t['sunday'] = $item->sunday;
            $userAvailabilities[] = $t;
        }
        $operations = $this->fetchTable('Operations')->find()->all()->toArray();
        $users = $this->fetchTable('Users')->find()->all();
        $usersArr = [];
        foreach ($users as $item) {
            $t = [];
            $t['id'] = $item->id;
            $t['isAdmin'] = $item->isAdmin;
            $t['isManager'] = $item->isManager;
            $t['f_name'] = $item->f_name;
            $t['l_name'] = $item->l_name;
            $t['logic_name'] = ucfirst($item->f_name) . ' ' . ucfirst($item->l_name);
            $usersArr[] = $t;
        }

        $tasks = $this->fetchTable('Tasks')->find()
            ->select([
                'Tasks.id',
                'Tasks.description',
                'Tasks.responsibility',
                'Tasks.status',
                'Tasks.deadline',
                'Tasks.shift_id',
                'start' => 'Shifts.start_time',
                'end' => 'Shifts.end_time',
                'rosterid' => 'Shifts.roster_id',
                'role' => 'Roles.name',
                'l_name' => 'Users.l_name',
                'f_name' => 'Users.f_name',
            ])
            ->contain([
                'Shifts' => [
                    'Users',
                    'Roles',
                    'Rosters' => function ($q) use ($id) {
                        return $q->where(['Rosters.id' => $id]);
                    }
                ]
            ])
            ->all();






        $this->set(compact('shift', 'roster', 'roles', 'users', 'shift_list', 'userAvailabilities', 'usersArr', 'tasks', 'operations'));
    }


    /**
     * Edit method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit()
    {
        if ($this->request->is(['patch', 'post', 'put', 'ajax'])) {
            $data = $this->request->getQuery('data');
            $id = $data['shift_id'];

            $shift = $this->Shifts->get($id, ['contain' => []]);
            $oldUserId = $shift->user_id;
            $oldRoleId = $shift->role_id;

            $date = $data['shiftDate'];
            $s_time = $data['start_time'];
            $e_time = $data['end_time'];
            $dateTimeStart = $date . ' ' . $s_time;
            $dateTimeEnd = $date . ' ' . $e_time;
            $shift->start_time = $dateTimeStart;
            $shift->end_time = $dateTimeEnd;
            $shift->user_id = $data['user_id'];

            if ($oldUserId == $shift->user_id) {
                if ($this->Shifts->save($shift)) {
                    $response = ['status' => 'success', 'message' => 'The shift has been updated successfully.'];
                } else {
                    $response = ['status' => 'error', 'message' => 'The shift could not be saved. Please, try again.'];
                }
            } else { // When there is change for new user
                $result = $this->checkForOverlappingShifts($shift);

                if ($result) {
                    $response = ['status' => 'error', 'message' => 'This person has already been added for this role on this date.'];
                } else {
                    // Try to save the new shift
                    if ($this->Shifts->save($shift)) {
                        $response = ['status' => 'success', 'message' => 'The shift has been saved.'];
                    } else {
                        $response = ['status' => 'error', 'message' => 'The shift could not be saved. Please, try again.'];
                    }
                }
            }

            return $this->response->withType('application/json')->withStringBody(json_encode($response));
        }

        $rosters = $this->Shifts->Rosters->find('list', ['limit' => 200])->all();
        $roles = $this->Shifts->Roles->find('list', ['limit' => 200])->all();
        $users = $this->fetchTable('Users')->find()->all();
    }

    /**
     * Delete method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null)
    {

        $this->request->allowMethod(['post', 'delete','ajax']);
        $shift = $this->Shifts->get($id);

        if ($this->Shifts->delete($shift)) {
            $this->Flash->success(__('The shift has been deleted.'));
        } else {
            $this->Flash->error(__('The shift could not be deleted. Please, try again.'));
        }

    //        return $this->redirect(['action' => 'index']);
        return $this->redirect($this->referer());
    }

    public function getShiftsForRoster($rosterId)
    {

        // Updated query using the where method
        $shifts = $this->Shifts->find()
        ->where(['roster_id' => $rosterId])
        ->toArray();

        return $shifts;
    }

    /**
     * Check for overlapping shifts.
     *
     * @param object $shift An object containing shift details like user_id, start_time, and end_time.
     * @return bool True if overlapping shifts exist, false otherwise.
     */
    public function checkForOverlappingShifts($shift) {
        $query = $this->Shifts->find()
            ->where(function (QueryExpression $exp) use ($shift) {
                // Create an OR condition with various AND conditions inside it
                $orConditions = $exp->or(function ($or) use ($shift) {
                    return $or->add([
                        ['start_time <=' => $shift->start_time, 'end_time >=' => $shift->start_time],
                        ['start_time <=' => $shift->end_time, 'end_time >=' => $shift->end_time],
                        ['start_time >=' => $shift->start_time, 'end_time <=' => $shift->end_time],
                        ['start_time <=' => $shift->start_time, 'end_time >=' => $shift->end_time],
                    ]);
                });

                // Add the user ID and the OR conditions
                return $exp->add(['user_id' => $shift->user_id])
                           ->add($orConditions);
            });

        // Execute the query and get the results
        $exist = $query->all();

        // Check if the results are empty or not
        return !$exist->isEmpty();
    }
    public function clockOut() {
        // Assuming user_id and other necessary variables are determined earlier in the code
        $shift = $this->Shifts->find()
            ->where(['user_id' => $user_id, 'clock_out_time IS' => null])
            ->first();

        if ($shift) {
            $now = new DateTime();
            $shift->clock_out_time = $now;
            $duration = $now->getTimestamp() - $shift->clock_in_time->getTimestamp();
            $shift->clock_hours = gmdate("H:i:s", $duration); // Update clock_hours

            // Check if it's a new week
            $currentWeekStart = new DateTime('monday this week');
            if (empty($shift->week_start_date) || $shift->week_start_date < $currentWeekStart) {
                $shift->week_start_date = $currentWeekStart;
                // Optionally reset weekly hours here or elsewhere depending on your app structure
            }

            // Save shift updates
            if ($this->Shifts->save($shift)) {
                $this->Flash->success('Clocked out successfully. Hours updated.');
            } else {
                $this->Flash->error('Unable to clock out.');
            }
        } else {
            $this->Flash->error('No open shift to clock out from.');
        }

        return $this->redirect(['action' => 'index']);
    }



    /**
     * Edit method
     *
     * @param string|null $id Task id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     * 
     */
    public function tasksedit($id = null)
    {
        if(!$id){
            if ($this->request->is(['patch', 'post', 'put', 'ajax'])) {
                $data = $this->request->getQuery('data');
                
                $id = $data['id'];
                // $task = $this->Tasks->get($id, [
                //     'contain' => [],
                // ]);
                $task = $this->fetchTable('Tasks')->get($id);
                if($data['description'])$task->description = $data['description'];
                if($data['responsibility'])$task->responsibility = $data['responsibility'];
                if($data['deadline'])$task->deadline = $data['deadline'];
                if($data['status'])$task->status = $data['status'];
                if ($this->fetchTable('Tasks')->save($task)) {
                    $this->Flash->success(__('The task has been saved.'));
                    return $this->redirect(['action' => 'index']);
                }
            }
        }
        
        // $task = $this->Tasks->get($id);
        $task = $this->fetchTable('Tasks')->get($id);
        
        // $tasks = $this->fetchTable('Tasks')->find()
        // ->select([
        //     'Tasks.id',
        //     'Tasks.description',
        //     'Tasks.responsibility',
        //     'Tasks.status',
        //     'Tasks.deadline',
        //     'Tasks.shift_id',
        //     'start' => 'Shifts.start_time',
        //     'end' => 'Shifts.end_time',
        //     'rosterid' => 'Shifts.roster_id',
        //     'role' => 'Roles.name',
        //     'l_name' => 'Users.l_name',
        //     'f_name' => 'Users.f_name',
        // ])
        // ->contain([
        //     'Shifts' => [
        //         'Users',
        //         'Roles',
        //         'Rosters' => function ($q) use ($id) {
        //             return $q->where(['Rosters.id' => $id]);
        //         }
        //     ]
        // ])
        // ->all();

        
        if (!$task) {
            $this->Flash->error(__('Task not found.'));
            return $this->redirect(['action' => 'index']);
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            $task = $this->fetchTable('Tasks')->patchEntity($task, $this->request->getData());

            if (empty($task->responsibility)) {
                $task->responsibility = 'No specific responsibility assigned.';
            }

            if (empty($task->description_color)) {
                $task->description_color = 'green'; 
            }

            if ($this->fetchTable('Tasks')->save($task)) {
                $this->Flash->success(__('The task has been saved.'));
                return $this->redirect(['action' => 'index']);
            }

            $this->Flash->error(__('The task could not be saved. Please, try again.'));
        }

        $this->set(compact('task'));
    }

}
